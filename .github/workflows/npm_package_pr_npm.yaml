name: NPM Package Pull Request using NPM
# This validates an npm package for pull requests and also uses npm for installing npm packages
# See npm_package_release_npm.yaml for more pipeline comments

on:
  workflow_call:
    inputs:
      runs_on:
        description: "Deprecated"
        type: string
      fallback_runner:
        description: "Use a github runner instead of a JupiterOne runner"
        type: boolean
      use_chromatic:
        description: "Does this release include chromatic"
        required: true
        type: boolean
      use_esbuild:
        description: "If using esbuild, insure its required build scripts are run"
        required: false
        type: boolean
    secrets:
      NPM_TOKEN:
        description: "A J1 npm.com Publish token"
        required: true
      CHROMATIC_PROJECT_TOKEN:
        description: "The Chromatic API token"
        required: false
      CORTEX_API_KEY:
        description: "An key that allows us to push data to Cortex"
        # We eventually want to make this required but we need to make sure we don't break the pipeline
        # required: true

# Save Money :money_with_wings:
concurrency:
  group: ${{ github.workflow }}-${{ github.event.repository.name }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

jobs:
  validate:
    name: Validate
    runs-on: ${{ (inputs.fallback_runner && 'ubuntu-latest') || fromJson('["jupiterone-dev", "arm64"]') }}
    timeout-minutes: 15
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v3
        with:
          node-version: 18
          cache: "npm"
          registry-url: "https://registry.npmjs.org"
      - run: npm ci --ignore-scripts
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
      - run: npm rebuild esbuild
        if: ${{ inputs.use_esbuild }}

      - run: npm run validate:ci
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

      # Sanity check so we don't end up with bad builds in main
      - run: npm ci --ignore-scripts --omit=dev
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
      - run: npm rebuild esbuild
        if: ${{ inputs.use_esbuild }}
      - run: npm run build
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

  chromatic-deployment:
    runs-on: ${{ (inputs.fallback_runner && 'ubuntu-latest') || fromJson('["jupiterone-dev", "arm64"]') }}
    if: ${{ inputs.use_chromatic }}
    timeout-minutes: 15
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - uses: actions/setup-node@v3
        with:
          node-version: 18
          cache: "npm"
          registry-url: "https://registry.npmjs.org"
      - run: npm ci --ignore-scripts
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
      - run: npm rebuild esbuild
        if: ${{ inputs.use_esbuild }}

      # Upload to chromatic
      - name: Publish to Chromatic
        uses: chromaui/action@v1
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          projectToken: ${{ secrets.CHROMATIC_PROJECT_TOKEN }}
          onlyChanged: true
          exitOnceUploaded: true
  # This job will fail without CORTEX_API_KEY but it will not fall its parellel peer jobs
  cortex:
    runs-on: ${{ (inputs.fallback_runner && 'ubuntu-latest') || fromJson('["jupiterone-dev", "arm64"]') }}
    timeout-minutes: 15
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 2
      - uses: actions/setup-node@v3
        with:
          node-version: 18.15.0
          cache: "npm"
          registry-url: "https://registry.npmjs.org"
      - run: npm ci --ignore-scripts
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
      - name: Create or update entity in Cortex
        run: npx --yes -p @jupiterone/web-tools-platform-analytics@latest platform-analytics all
        env:
          CORTEX_API_KEY: ${{ secrets.CORTEX_API_KEY }}
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
