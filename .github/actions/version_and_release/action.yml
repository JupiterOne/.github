name: Version And Release

inputs:
  github_token:
    description: 'Github access token'
    required: true
    type: string

runs:
  using: "composite"
  steps:
    - id: get_package_version
      name: get_package_version
      shell: bash
      run: |
        echo "version=$(jq -r .version < package.json)" >> $GITHUB_OUTPUT
    - name: semver_versions
      id: semver_versions
      uses: 'WyriHaximus/github-action-next-semvers@v1'
      with:
        version: ${{ steps.get_package_version.outputs.version }}
    - name: set_patch_by_default
      shell: bash
      run: |
        echo "new_version=v${{ steps.semver_versions.outputs.patch }}" >> $GITHUB_ENV
    - name: set_minor_version 
      if: ${{ contains(github.event.pull_request.labels.*.name, 'minor') }}
      shell: bash
      run: |
        echo "new_version=v${{ steps.semver_versions.outputs.minor }}" >> $GITHUB_ENV
    - name: set_major 
      if: ${{ contains(github.event.pull_request.labels.*.name, 'major') }}
      shell: bash
      run: |
        echo "new_version=v${{ steps.semver_versions.outputs.major }}" >> $GITHUB_ENV
    - name: echo_new_version
      shell: bash
      run: |
        echo "new_version will be ${{ env.new_version }}"
    - name: update_package_json
      shell: bash
      run: echo "`jq '.version="${{ env.new_version }}"' package.json`" > package.json
    - name: read_package_json
      shell: bash
      run: cat package.json
