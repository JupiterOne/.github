name: Standard SPA PR

on:
  workflow_call:
    inputs:
      working_directory:
        description: "The working directory from which to run the workflow commands"
        required: false
        type: string
        default: '.'
      runs_on:
        description: "Deprecated noop - To be removed"
        type: string
      use_github_runner:
        description: "If true will levarege ubuntu-latest, otherwise will fall back to the J1 in-house runner"
        default: false
        type: boolean
      install_yarn:
        description: "In house runners may not have yarn installed"
        required: false
        type: boolean
      use_validate:
        description: "Run test, in most case we want this"
        required: true
        type: boolean
      use_chromatic:
        description: "Run VRT Storybook tests with chromatic"
        required: true
        type: boolean
      use_magic_url:
        description: "Deploy to dev via a query param, required for normal SPAs"
        required: true
        type: boolean
      use_e2e:
        description: "Run E2E test, in most case we want this"
        type: boolean
      use_e2e_trigger:
        description: "Trigger E2E tests in other repos"
        type: boolean
      repos_to_test:
        description: "Kick off a n+ spec files within n+ repos"
        type: string
      e2e_containers:
        description: "The number of tests that you want Cypress to run in parallel (ex. 1, 2, 3, ...)"
        type: string
        default: '["1"]'
      e2e_pass_on_error:
        description: "Pass the workflow even if the E2E test fail"
        type: boolean
        default: true
      e2e_artemis_config_path:
        description: 'Used to determine the path to the artemis config file'
        type: string
        default: 'cypress/artemis-config.yaml'
      external_pr_number:
        description: 'Used by the e2e_trigger to pass in the PR number associated with the PR that triggered the flow'
        type: string
      external_pr_title:
        description: 'Used by the e2e_trigger to give builds in Cypress the correct title associated with the PR that triggered the flow'
        type: string
      external_pr_branch:
        description: 'Used by the e2e_trigger to give builds in Cypress the correct branch name'
        type: string
      external_pr_author:
        description: 'Used by the e2e_trigger to give builds in Cypress the correct author name associated with the owner of the PR'
        type: string
      external_pr_sha:
        description: 'Used by the e2e_trigger to give builds in Cypress the correct SHA associated with the PR that triggered the flow'
        type: string
      external_pr_repo_name:
        description: 'Used by the e2e_trigger to tag builds in Cypress with the appropriate repo name (used to associate a repo with a test run)'
        type: string
      externally_triggered:
        description: 'True if E2E tests are triggered from another repo'
        default: false
        type: boolean
      spec_to_run:
        description: 'Used to determine which test to run'
        type: string
        default: 'cypress/e2e/**/*.feature'
    secrets:
      NPM_TOKEN:
        description: "A J1 npm.com Publish token"
        required: true
      CHROMATIC_PROJECT_TOKEN:
        description: "The Chromatic API token"
        required: false
      AWS_ROLE:
        description: "J1 AWS role with deploy permissions to dev"
        required: false
      AWS_REGION:
        description: "The current region of the dev env"
        required: false
      AWS_APPS_BUCKET:
        description: "What bucket to deploy the magic url"
        required: false
      CYPRESS_RECORD_KEY:
        description: "The record key associated with the project in Cypress"
      CYPRESS_PROJECT_ID:
        description: "The project ID associated with the project in Cypress"
      CYPRESS_PASSWORD:
        description: "The password of the E2E username"
      E2E_AUTO:
        description: "A J1 token for kicking off cypress tests"

jobs:
  create-shared-vars:
    defaults:
      run:
        working-directory: ${{ inputs.working_directory }}
    name: Creates shared variables used by the the jobs below based on whether the jobs were triggered by another repo or internally
    runs-on: ${{ inputs.use_github_runner && 'ubuntu-latest' || '["jupiterone-dev", "arm64"]' }}
    timeout-minutes: 15
    outputs:
      groupId: ${{ steps.outputStep.outputs.groupId }}
      e2eJobDescription: ${{ steps.outputStep.outputs.e2eJobDescription }}
    steps:
      - id: outputStep
        run: |
          if [[ ${{ inputs.externally_triggered }} == true ]]; then
            echo "groupId=$(date +'%Y-%m-%d %H:%M:%S %s')" >> $GITHUB_OUTPUT
            echo "e2eJobDescription=external repo ${{ inputs.external_pr_repo_name }} - ${{ inputs.external_pr_branch }}" >> $GITHUB_OUTPUT 
          else
            echo "groupId=${{ github.workflow }}-${{ github.event.repository.name }}-${{ github.event.pull_request.number || github.ref }}" >> $GITHUB_OUTPUT
            echo "e2eJobDescription=${{ github.event.repository.name }}" >> $GITHUB_OUTPUT         
          fi
  
  validate:
    defaults:
      run:
        working-directory: ${{ inputs.working_directory }}
    name: Validate
    runs-on: ${{ inputs.use_github_runner && 'ubuntu-latest' || '["jupiterone-dev", "arm64"]' }}
    timeout-minutes: 15
    concurrency:
      group: validate-${{ needs.create-shared-vars.outputs.groupId }}
      cancel-in-progress: true
    needs: [create-shared-vars]
    if: ${{ inputs.use_validate }}
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 2
      # This should be part of the runner
      ## Install yarn START
      - uses: actions/setup-node@v3
        with:
          node-version: 18
        if: ${{ inputs.install_yarn }}
      - run: npm install -g yarn
        if: ${{ inputs.install_yarn }}
      ## Install yarn STOP
      - uses: actions/setup-node@v3
        with:
          node-version: 18
          cache: "yarn"
          registry-url: "https://registry.npmjs.org"
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
      - run: yarn --frozen-lockfile --ignore-optional
      
      - name: Validate
        run: yarn validate:ci
      # Check if we should skip validating runtime types
      - name: Check For Skip
        run: |
          if [[ $(git log -2 --pretty=format:'%s' | grep "\[skip remote-type-check\]")  ]]; then 
            echo "HAS_SKIP=true" >> $GITHUB_ENV
          fi
      # Validate runtime types (if applicable)
      - name: Validate Runtime Modules Types
        run: |
          if [[ -f "node_modules/@jupiterone/web-runtime-modules/cli/testInterfaceRuntimeModules.js" ]]; then
            npx testInterfaceRuntimeModules;
            echo "No breaking changes found";
          else
            echo "Skipping, @jupiterone/web-runtime-modules not installed";
          fi
        if: ${{ !env.HAS_SKIP }}

  chromatic-deployment:
    defaults:
      run:
        working-directory: ${{ inputs.working_directory }}
    runs-on: ${{ inputs.use_github_runner && 'ubuntu-latest' || '["jupiterone-dev", "arm64"]' }}
    timeout-minutes: 15
    concurrency:
      group: chromatic-deployment-${{ needs.create-shared-vars.outputs.groupId }}
      cancel-in-progress: true
    needs: [create-shared-vars]
    if: ${{ inputs.use_chromatic }}
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
      # This should be part of the runner
      ## Install yarn START
      - uses: actions/setup-node@v3
        if: ${{ inputs.install_yarn }}
        with:
          node-version: 18
      - run: npm install -g yarn
        if: ${{ inputs.install_yarn }}
      ## Install yarn STOP
      - uses: actions/setup-node@v3
        with:
          node-version: 18
          cache: "yarn"
          registry-url: "https://registry.npmjs.org"
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
      - run: yarn --frozen-lockfile --ignore-optional

      - name: Publish to Chromatic
        uses: chromaui/action@v1
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          projectToken: ${{ secrets.CHROMATIC_PROJECT_TOKEN }}
          onlyChanged: true
          exitOnceUploaded: true

  deploy_magic_url:
    defaults:
      run:
        working-directory: ${{ inputs.working_directory }}
    name: Deploy Magic URL
    runs-on: ${{ inputs.use_github_runner && 'ubuntu-latest' || '["jupiterone-dev", "arm64"]' }}
    timeout-minutes: 15
    concurrency:
      group: deploy-magic-url-${{ needs.create-shared-vars.outputs.groupId }}
      cancel-in-progress: true
    needs: [create-shared-vars]
    if: ${{ inputs.use_magic_url }}
    permissions:
      id-token: write
      contents: read
      pull-requests: write
    steps:
      - uses: actions/checkout@v3
      # This should be part of the runner
      ## Install yarn START
      - uses: actions/setup-node@v3
        if: ${{ inputs.install_yarn }}
        with:
          node-version: 18
      - run: npm install -g yarn
        if: ${{ inputs.install_yarn }}
      ## Install yarn STOP
      - uses: actions/setup-node@v3
        with:
          node-version: 18
          cache: "yarn"
          registry-url: "https://registry.npmjs.org"
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
      # Only allow production deps be installed in the final build!
      - run: yarn --frozen-lockfile --production --ignore-optional

      - name: Building
        run: yarn build
      - name: configure aws credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          role-to-assume: ${{ secrets.AWS_ROLE }}
          role-session-name: ${{ github.event.repository.name }}-magic-url-role-session
          aws-region: ${{ secrets.AWS_REGION }}
      - name: Deploy
        # This bucket file location is static and editing it will break the Magic URL
        run: |
          [ -f deploy/dist/${{ github.event.repository.name }}-remote-types.tgz ] && mv deploy/dist/${{ github.event.repository.name }}-remote-types.tgz deploy/dist/remote-types.tgz
          aws s3 sync deploy/dist s3://${{ secrets.AWS_APPS_BUCKET }}/static/manual-deploy/${{ github.event.repository.name }}/PR-${{ github.event.number }}/
  
  prepare_for_e2e_test:
    defaults:
      run:
        working-directory: ${{ inputs.working_directory }}
    name: Prepare For E2E Tests
    runs-on: ${{ inputs.use_github_runner && 'ubuntu-latest' || '["jupiterone-dev", "arm64"]' }}
    timeout-minutes: 15
    concurrency:
      group: prepare-for-e2e-test-${{ needs.create-shared-vars.outputs.groupId }}
      cancel-in-progress: true
    needs: [create-shared-vars]
    # We need this job to run even if the magic url is skipped which occurs via the e2e_trigger.yml
    if: |
      always()
      && inputs.use_e2e
    permissions:
      id-token: write
      contents: read
      pull-requests: write
    outputs:
      artemisAccount: ${{ steps.outputStep.outputs.artemisData }}
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v3
        with:
          node-version: 18
          cache: 'npm'
          registry-url: 'https://registry.npmjs.org'
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
      - run: yarn --frozen-lockfile --ignore-optional
      - name: configure aws credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          role-to-assume: ${{ secrets.AWS_ROLE }}
          role-session-name:
            ${{ github.event.repository.name }}-magic-url-role-session
          aws-region: us-east-1
      - name: launch artemis
        run: npx artemis-launch -c ${{ inputs.e2e_artemis_config_path }} --action=launch --outputFilename=artemis-run
      - id: outputStep
        # Use jq to extract the accountName from the json file in a raw form
        run: echo "artemisData=$(jq -r .[0].metadata.accountName < artemis-run.json)" >> $GITHUB_OUTPUT

  # Kicks off tests this repo
  run-e2e-tests:
    defaults:
      run:
        working-directory: ${{ inputs.working_directory }}
    name: Run E2E Tests for ${{ needs.create-shared-vars.outputs.e2eJobDescription }}
    runs-on: ${{ inputs.use_github_runner && 'ubuntu-latest' || '["jupiterone-dev", "amd64"]' }}
    container:
      image: cypress/browsers:node18.12.0-chrome106-ff106
      options: --platform linux/amd64 --privileged
    timeout-minutes: 15
    concurrency:
      group: run-e2e-tests-${{ needs.create-shared-vars.outputs.groupId }}
      cancel-in-progress: true
    if: |
      always()
      && inputs.use_e2e
    needs: [create-shared-vars, magic_url, prepare_for_e2e_test]
    continue-on-error: ${{ inputs.e2e_pass_on_error }}
    strategy:
      # when one test fails, DO NOT cancel the other
      # containers, because this will kill Cypress processes
      # leaving Cypress Cloud hanging ...
      # https://github.com/cypress-io/github-action/issues/48
      fail-fast: false
      matrix:
        # run copies of the current job in parallel
        containers: ${{ fromJson(inputs.e2e_containers) }}
        node: [18]
    steps:
      - name: Log E2E Info
        run: echo "Running E2E test for PR with title of ${{ inputs.external_pr_title || github.event.pull_request.title }} and number being ${{ inputs.external_pr_number || github.event.pull_request.number }}. The following account will be used ${{ needs.prepare_for_e2e_test.outputs.artemisAccount }}."
      - name: Log groupId
        run: echo "groupId - ${{ needs.create-shared-vars.outputs.groupId }}"
      - name: Log status of prepare_for_e2e_test job
        run: echo "prepare status - ${{ needs.prepare_for_e2e_test.result }}"
      # Fail the rest of the job if the prepare_for_e2e_test job failed (needed since we use always)
      - name: Check status of prepare_for_e2e_test job
        if: ${{ needs.prepare_for_e2e_test.result != 'success' }}
        run: exit 1
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v3
        with:
          node-version: 18
          cache: 'npm'
          registry-url: 'https://registry.npmjs.org'
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
      - name: Cypress run
        id: cypress_run
        continue-on-error: true
        uses: cypress-io/github-action@v5
        timeout-minutes: 60
        with:
          record: true
          parallel: true
          group: PR
          ci-build-id: '${{ github.sha }}-${{ github.workflow }}-${{ github.event_name }}-${{ inputs.external_pr_number || github.event.pull_request.number }}'
          browser: chrome
          tag: ${{ inputs.external_pr_repo_name || github.event.repository.name }},${{ github.event_name }}
        env:
          # https://github.com/cypress-io/cypress/issues/25357#issuecomment-1426992422
          ELECTRON_EXTRA_LAUNCH_ARGS: '--disable-gpu'
          CYPRESS_BROWSER: chrome
          COMMIT_INFO_MESSAGE: ${{ inputs.external_pr_title || github.event.pull_request.title }}
          COMMIT_INFO_BRANCH: ${{ inputs.external_pr_branch }}
          COMMIT_INFO_AUTHOR: ${{ inputs.external_pr_author }}
          COMMIT_INFO_SHA: ${{ inputs.external_pr_sha }}
          CYPRESS_MAILINATOR_API_KEY: ${{ secrets.CYPRESS_MAILINATOR_API_KEY }}
          CYPRESS_RECORD_KEY: ${{ secrets.CYPRESS_RECORD_KEY }}
          CYPRESS_PROJECT_ID: ${{ secrets.CYPRESS_PROJECT_ID }}
          CYPRESS_PASSWORD: ${{ secrets.CYPRESS_PASSWORD }}
          CYPRESS_ENVIRONMENT_NAME: jupiterone-dev
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
          PR_NUMBER: ${{ inputs.external_pr_number || github.event.pull_request.number }}
          REPO_NAME: ${{ inputs.external_pr_repo_name || github.event.repository.name }}
          SPEC: ${{ inputs.spec_to_run }}
          ACCOUNT: ${{ needs.prepare_for_e2e_test.outputs.artemisAccount }}
      # We have to manually output an exit code of 0 to ensure the action passes if e2e_pass_on_error is true
      - name: Pass with failures
        if: ${{ inputs.e2e_pass_on_error }}
        run: exit 0
      - name: Set success vars
        if: ${{ contains(steps.cypress_run.outcome, 'success') }}
        run: |
          echo "TEST_STATUS_STATE=success" >> $GITHUB_ENV
          echo "TEST_STATUS_DESCRIPTION='E2E test passed'" >> $GITHUB_ENV
      - name: Set failure vars
        if: ${{ !contains(steps.cypress_run.outcome, 'success') }}
        run: |
          echo "TEST_STATUS_STATE=failure" >> $GITHUB_ENV
          echo "TEST_STATUS_DESCRIPTION='E2E test failed'" >> $GITHUB_ENV
      - name: E2E Test Status
        uses: Sibz/github-status-action@v1
        continue-on-error: ${{ inputs.e2e_pass_on_error }}
        with:
          authToken: ${{secrets.GITHUB_TOKEN}}
          context: 'E2E Test Status'
          description: ${{ env.TEST_STATUS_DESCRIPTION }}
          state: ${{ env.TEST_STATUS_STATE }}
          sha: ${{github.event.pull_request.head.sha || github.sha}}

  # Kicks off tests in other repos
  run-e2e-integration-tests:
    defaults:
      run:
        working-directory: ${{ inputs.working_directory }}
    runs-on: ${{ inputs.use_github_runner && 'ubuntu-latest' || '["jupiterone-dev", "arm64"]' }}
    timeout-minutes: 60
    concurrency:
      group: validate-${{ needs.create-shared-vars.outputs.groupId }}
      cancel-in-progress: true
    if: ${{ inputs.use_e2e_trigger }}
    needs: [create-shared-vars, magic_url]
    strategy:
      matrix:
        repos: ${{ fromJson(inputs.repos_to_test) }}
    continue-on-error: ${{ inputs.e2e_pass_on_error }}
    steps:
      - uses: actions/checkout@v3
      - name: Log E2E Info
        run: echo "In the ${{ matrix.repos.repo.name }} repo, run the following test ${{ matrix.repos.repo.spec }}"
      - name: Get author name
        run: echo "COMMIT_INFO_AUTHOR=$(git show -s --pretty=%an)" >> $GITHUB_ENV
      - name: Trigger Workflow and Wait
        id: trigger_run
        continue-on-error: ${{ inputs.e2e_pass_on_error }}
        uses: convictional/trigger-workflow-and-wait@v1.6.5
        with:
          owner: JupiterOne
          repo: ${{ matrix.repos.repo.name }}
          github_token: ${{ secrets.E2E_AUTO }}
          workflow_file_name: e2e_trigger.yml
          propagate_failure: ${{ !inputs.e2e_pass_on_error }}
          client_payload: '{"spec_to_run":"${{ matrix.repos.repo.spec }}","external_pr_number":"${{ github.event.pull_request.number }}","external_pr_title":"${{ github.event.pull_request.title }}","external_pr_repo_name":"${{ github.event.repository.name }}","external_pr_branch":"${{ github.event.pull_request.head.ref }}","external_pr_author":"${{ env.COMMIT_INFO_AUTHOR }}","external_pr_sha":"${{ github.event.pull_request.base.sha }}"}'
      # We have to manually output an exit code of 0 to ensure the action passes if e2e_pass_on_error is true
      - name: Pass with failures
        if: ${{ inputs.e2e_pass_on_error }}
        run: exit 0
      - name: Set success vars
        if: ${{ steps.trigger_run.outcome }} == 'success'
        run: |
          echo "TEST_STATUS_STATE=success" >> $GITHUB_ENV
          echo "TEST_STATUS_DESCRIPTION='E2E test passed'" >> $GITHUB_ENV
      - name: Set failure vars
        if: ${{ steps.trigger_run.outcome }} != 'success'
        run: |
          echo "TEST_STATUS_STATE=failure" >> $GITHUB_ENV
          echo "TEST_STATUS_DESCRIPTION='E2E test failed'" >> $GITHUB_ENV
      - name: E2E Test Status
        uses: Sibz/github-status-action@v1
        continue-on-error: ${{ inputs.e2e_pass_on_error }}
        with:
          authToken: ${{secrets.GITHUB_TOKEN}}
          context: 'E2E Test Status'
          description: ${{ env.TEST_STATUS_DESCRIPTION }}
          state: ${{ env.TEST_STATUS_STATE }}
          sha: ${{github.event.pull_request.head.sha || github.sha}}
