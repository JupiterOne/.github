name: Default workflow for a runtime application when a PR is opened

on:
  workflow_call:
    inputs:
      fallback_runner:
        description: "If true will leverage ubuntu-latest, otherwise will fall back to the J1 in-house runner"
        default: false
        type: boolean
      use_validate:
        description: "Run validation, in most case we want this"
        default: true
        type: boolean
      use_chromatic:
        description: "Run VRT Storybook tests with chromatic"
        default: false
        type: boolean
      use_e2e:
        description: "Run E2E test, in most case we want this"
        type: boolean
        default: false
      e2e_filter_tags:
        description: "Tests will be filtered based on the tags defined here"
        type: string  
      e2e_containers:
        description: "The number of tests that you want Cypress to run in parallel (ex. 1, 2, 3, ...)"
        type: string
        default: '["1"]'
      e2e_pass_on_error:
        description: "Pass the workflow even if the E2E test fail"
        type: boolean
        default: false
      e2e_artemis_config_path:
        description: 'Used to determine the path to the artemis config file'
        type: string
        default: 'cypress/artemis-config.yaml'
      spec_to_run:
        description: 'Used to determine which test to run'
        type: string
        default: 'cypress/e2e/**/*.feature'
      magic_url_route: 
        description: 'The relative route the magic url should go to'
        type: string
        default: '/'
    secrets:
      NPM_TOKEN:
        description: "A J1 npm.com Publish token"
        required: true
      CHROMATIC_PROJECT_TOKEN:
        description: "The Chromatic API token"
        required: false
      CYPRESS_RECORD_KEY:
        description: "The record key associated with the project in Cypress"
        required: false
      CYPRESS_PROJECT_ID:
        description: "The project ID associated with the project in Cypress"
        required: false
      CYPRESS_PASSWORD:
        description: "The password of the E2E username"
        required: false

env:
  NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
  TEST: false

concurrency:
  group: ${{ github.head_ref || github.run_id }}
  cancel-in-progress: true

# Permissions needed to push the artifact to the S3 bucket and show the status in the PR.
permissions:
  id-token: write
  contents: read
  pull-requests: write
  statuses: write

jobs:
  migration_number:
    runs-on: ${{ (inputs.fallback_runner && 'ubuntu-latest') || fromJson('["jupiterone-dev", "arm64"]') }}
    outputs:
      migration: ${{ steps.migration_number.outputs.migration }}
    steps:
      - uses: actions/checkout@v2
      - id: migration_number
        name: migration_number
        uses: ./.github/actions/frontend/runtime/migration_number

  validate:
    runs-on: ${{ (inputs.fallback_runner && 'ubuntu-latest') || fromJson('["jupiterone-dev", "arm64"]') }}
    if: ${{ inputs.use_validate }}
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 2
      - name: validate
        uses: ./.github/actions/frontend/runtime/validate

  chromatic_upload:
    runs-on: ${{ (inputs.fallback_runner && 'ubuntu-latest') || fromJson('["jupiterone-dev", "arm64"]') }}
    if: ${{ inputs.use_chromatic }}
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: chromatic_upload
        uses: ./.github/actions/frontend/runtime/chromatic
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          chromatic_project_token: ${{ secrets.CHROMATIC_PROJECT_TOKEN }}

  magic_url:
    runs-on: ${{ (inputs.fallback_runner && 'ubuntu-latest') || fromJson('["jupiterone-dev", "arm64"]') }}
    needs: [migration_number]
    steps:
      - uses: actions/checkout@v2
      - name: magic_url
        uses: ./.github/actions/frontend/runtime/magic_url
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          migration_number: ${{ needs.migration_number.outputs.migration }}
          magic_url_route: ${{ inputs.magic_url_route }}

  e2e_prepare:
    runs-on: ${{ (inputs.fallback_runner && 'ubuntu-latest') || fromJson('["jupiterone-dev", "arm64"]') }}
    needs: [migration_number]
    if: ${{ inputs.use_e2e }}
    outputs:
      artemis_account_name: ${{ steps.e2e_prepare.outputs.artemis_account_name }}
      artemis_account_id: ${{ steps.e2e_prepare.outputs.artemis_account_id }}
      artemis_account_subdomain: ${{ steps.e2e_prepare.outputs.artemis_account_subdomain }}
      artemis_users: ${{ steps.e2e_prepare.outputs.artemis_users }}
    steps:
      - uses: actions/checkout@v2
      - id: e2e_prepare
        name: e2e_prepare
        uses: ./.github/actions/frontend/runtime/e2e_prepare
        with:
          e2e_artemis_config_path: ${{ inputs.e2e_artemis_config_path }}
          user_count: $(echo '${{ inputs.e2e_containers }}' | jq '. | length')

  e2e_run:
    # Note this is the only job that leverages amd64
    runs-on: ${{ (inputs.fallback_runner && 'ubuntu-latest') || fromJson('["jupiterone-dev", "amd64"]') }}
    container: cypress/browsers:node18.12.0-chrome106-ff106
    if: ${{ inputs.use_e2e }}
    continue-on-error: ${{ inputs.e2e_pass_on_error }}
    permissions: write-all
    timeout-minutes: 25
    needs: [migration_number, magic_url, e2e_prepare]
    strategy:
      # when one test fails, DO NOT cancel the other containers, because this will kill Cypress processes
      # leaving Cypress Cloud hanging: https://github.com/cypress-io/github-action/issues/48 
      fail-fast: false
      matrix:
        # run copies of the current job in parallel
        containers: ${{ fromJson(inputs.e2e_containers) }}
        node: [18]
    outputs:
      test_passed: ${{ steps.e2e_run.outputs.test_passed }}
    steps:
      - uses: actions/checkout@v2
      - id: e2e_run
        name: e2e_run
        uses: ./.github/actions/frontend/runtime/e2e_run
        continue-on-error: ${{ inputs.e2e_pass_on_error }}
        with:
          artemis_account_name: ${{ needs.e2e_prepare.outputs.artemis_account_name }}
          artemis_account_id: ${{ needs.e2e_prepare.outputs.artemis_account_id }}
          artemis_account_subdomain: ${{ needs.e2e_prepare.outputs.artemis_account_subdomain }}
          artemis_users: ${{ needs.e2e_prepare.outputs.artemis_users }}
          cypress_container: ${{ matrix.containers }}
          cypress_mailinator_api_key: ${{ secrets.CYPRESS_MAILINATOR_API_KEY }}
          cypress_record_key: ${{ secrets.CYPRESS_RECORD_KEY }}
          cypress_project_id: ${{ secrets.CYPRESS_PROJECT_ID }}
          cypress_password: ${{ secrets.CYPRESS_PASSWORD }}
          e2e_filter_tags: ${{ inputs.e2e_filter_tags }}
          e2e_pass_on_error: ${{ inputs.e2e_pass_on_error }}
          github_token: ${{ secrets.GITHUB_TOKEN }}
          migration_number: ${{ needs.migration_number.outputs.migration }}
          spec_to_run: ${{ inputs.spec_to_run }}

  # Unless e2e_pass_on_error is true, this will never get hit if an E2E test fails
  e2e_status:
    runs-on: ${{ (inputs.fallback_runner && 'ubuntu-latest') || fromJson('["jupiterone-dev", "arm64"]') }}
    needs: [e2e_run]
    steps:
      - uses: actions/checkout@v2
      - name: e2e_status
        uses: ./.github/actions/frontend/runtime/e2e_status
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          commit_info_sha: ${{ github.sha }}
          e2e_passed: ${{ needs.e2e_run.outputs.test_passed }}
          e2e_pass_on_error: ${{ inputs.e2e_pass_on_error }}
